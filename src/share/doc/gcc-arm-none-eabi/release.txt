Release notes for
****************************************************
GNU Arm Embedded Toolchain 2020-q2-preview
****************************************************

This is a preview release for M-profile Vector Extension (MVE) and
Custom Datapath Extension (CDE) features, and is not a production release.
For a production quality toolchain, use the GNU Arm Embedded Toolchain
9-2020-q2-update release.

This release includes bare metal pre-built binaries for AArch32 EABI targets,
which can be hosted on:
* Windows 10 or later on 32/64-bit architecture
* Linux
  - on AArch64 (RHEL 7, Ubuntu 14.04 or later)
  - on x86_64 (RHEL 7, Ubuntu 16.04 or later)
* Mac OS X 10.14 or later on 64-bit architecture

For Windows, the binaries are provided with an installer and as a zip file.
For Linux, the binaries are provided as tarball files.
For Mac OS X, the binaries are provided as tarball and pkg files.

The release also contains source code package (together with build scripts and
instructions to setup the build environment), which is composed of:

  * gcc : refs/vendors/ARM/heads/arm-10
    git://gcc.gnu.org/git/gcc.git commit 58ae4fa0f1563eacac56291c00c876e6594f9925

  * binutils : master
    git://sourceware.org/git/binutils-gdb.git commit cceb53b8849bc76f522931890b585b41e6662fa5

  * newlib and newlib-nano : newlib-3.3.0
    git://sourceware.org/git/newlib-cygwin.git commit 6d79e0a58866548f435527798fbd4a6849d05bc7

  * gdb : master
    git://sourceware.org/git/binutils-gdb.git commit cceb53b8849bc76f522931890b585b41e6662fa5

Note that some or all of the following prerequisites are downloaded when
building from source:

  * EnvVarUpdate NSIS script :
    http://nsis.sourceforge.net/mediawiki/images/a/ad/EnvVarUpdate.7z

  * expat 2.1.1 :
    https://downloads.sourceforge.net/project/expat/expat/2.1.1/expat-2.1.1.tar.bz2

  * gmp 6.1.0 :
    https://gmplib.org/download/gmp/gmp-6.1.0.tar.bz2

  * isl 0.18 :
    http://isl.gforge.inria.fr/isl-0.18.tar.xz

  * libelf 0.8.13 :
    https://fossies.org/linux/misc/old/libelf-0.8.13.tar.gz

  * libiconv 1.15 :
    https://ftp.gnu.org/pub/gnu/libiconv/libiconv-1.15.tar.gz

  * mpc 1.0.3 :
    ftp://ftp.gnu.org/gnu/mpc/mpc-1.0.3.tar.gz

  * mpfr 3.1.4 :
    http://www.mpfr.org/mpfr-3.1.4/mpfr-3.1.4.tar.bz2

  * python 2.7.7 :
    https://www.python.org/ftp/python/2.7.7/python-2.7.7.msi

  * zlib 1.2.8 :
    http://www.zlib.net/fossils/zlib-1.2.8.tar.gz

Features:
* All GCC 10.1 features

Tests:
* Targets:
  + Variety of Cortex-M0/M0+/M3/M4/M7/A9 boards
  + Qemu
  + Arm Fast Models

Notable changes in 2020-q2-preview release:
* Added support for:
  + M-profile Vector Extension (MVE) assembler and intrinsics
  + Custom Datapath Extension (CDE)
  + Cortex-M55

Known issues:
* Doing IPA on CMSE generates a linker error:
The linker will error out when resulting object file contains a symbol for
the clone function with the __acle_se prefix that has a non-local binding.
  Issue occurs when compiling binaries for M-profile Secure Extensions where
the compiler may decide to clone a function with the cmse_nonsecure_entry
attribute.
  Although cloning nonsecure entry functions is legal, as long as the clone
is only used inside the secure application, the clone function itself should
not be seen as a secure entry point and so it should not have the __acle_se
prefix.
  A possible workaround for this is to add a 'noclone' attribute to
functions with the 'cmse_nonsecure_entry'. This will prevent GCC from cloning
such functions.

* Load or Store of __fp16 type together with MVE might generate invalid code:
If you use __fp16 type together with MVE enabled, then when the compiler needs
to generate an instruction to load a Floating-point Extension register
(S register) from memory or an instruction to store a Floating-point Extension
register (S register) to memory, then the compiler generates the wrong assembly
instruction.
  The wrong assembly instruction is generated by the front-end for any
optimization other than -O0. The wrong instruction causes an error during
assembly, for example:
  "Error: instruction does not support writeback - `vstr.16 s15,[r0]!'"
  "Error: instruction does not support writeback - `vldr.16 s15,[r0]!'"
  The workaround is to use the -O0 command line option to generate the correct
instruction when loading or storing of __fp16 type together with MVE.
